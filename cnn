# FUNCTIONS
from PIL import Image
import tensorflow as tf
import numpy as np
import os
import matplotlib as plt
import matplotlib.pyplot as plt2

def saveImages(data, path,epoch = ""):
    i = 0
    add = ""

    for array in data:
        if len(array.shape) == 2:
                array2 = np.asarray(array*255 , np.uint8)
                array2 = np.reshape(array2,[imwidth,imwidth])
                add = "x"+str(epoch).zfill(3)
                im = Image.fromarray(array2)
                im.save(os.path.join(path,add+str(i)+".png"))
                i = i+1
        if len(array.shape)==3:
            if array.shape[2] == 1:
                array = array[:, :, 0]
                add = "z"

            im = Image.fromarray(array)
            im.save(os.path.join(path,add+str(i)+".png"))
            i = i+1

def read_images(input_paths,label_paths):
    """ read filepaths and return decoded images """
    input_content = tf.io.read_file(input_paths)
    label_content = tf.io.read_file(label_paths)
    input_images = tf.image.decode_png(input_content, channels=3)
    labels = tf.image.decode_png(label_content, channels=1)
    return input_images, labels

def create_stars_data(input_image, label):
    """ manipulates images as needed for the stars (and similar) dataset """
    input_image = tf.divide(input_image, np.uint8(255), name="normalize_x")
    input_image = tf.image.resize(input_image, [imwidth, imwidth])
    #input_image = tf.reshape(input_image,[3,imwidth,imwidth])

    label = tf.divide(label, np.uint8(255), name="normalize_y")
    label = tf.image.resize(label, [imwidth, imwidth])
    label = tf.round(label, name="round_y")
    # label = tf.reshape(label,[1,imwidth*imwidth])
    return input_image, label

def showImagesDataColor(data):
            fig=plt2.figure(figsize=(16, 16))
            columns = len(data)
            rows = 1
            i=0
            for array in data:
                i = i+1
                array2 = np.asarray(array*255 , np.uint8)
                #array2 = np.reshape(array2,[imwidth,imwidth,3])
                array2 = np.reshape(array2,[imwidth,imwidth,3])

                fig.add_subplot(rows, columns,i)
                plt2.imshow(array2) #,cmap='sRGB1')
            plt2.show()

def showImagesDataGrey(data):
            fig=plt2.figure(figsize=(16, 16))
            columns = len(data)
            rows = 1
            i=0
            for array in data:
                i = i+1
                array2 = np.asarray(array*255 , np.uint8)
                array2 = np.reshape(array2,[imwidth,imwidth])

                fig.add_subplot(rows, columns,i)
                plt2.imshow(array2,cmap='gray')
            plt2.show()